# -*- coding: utf-8 -*-
"""zomatosalesanalysisandvisualisation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1O7ZIJ9v2kqGs04A_LCNZxJBCIxGAG87h
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
plt.style.use('dark_background')

from google.colab import drive
drive.mount('/content/drive')

# Load the file from Google Drive
file_path = '/content/drive/My Drive/zomato.csv'
df = pd.read_csv(file_path)
df.head()

df.shape

df.columns

df = df.drop(['url', 'address', 'phone', 'menu_item', 'dish_liked', 'reviews_list'], axis = 1)
df.head()

df.info()

df.drop_duplicates(inplace = True)
df.shape

df['rate'].unique()

def handlerate(value):
    if(value=='NEW' or value=='-'):
        return np.nan
    else:
        value = str(value).split('/')
        value = value[0]
        return float(value)

df['rate'] = df['rate'].apply(handlerate)
df['rate'].head()

df['rate'].fillna(df['rate'].mean(), inplace = True)
df['rate'].isnull().sum()

df.info()

df.dropna(inplace = True)
df.head()

df.rename(columns = {'approx_cost(for two people)':'Cost2plates', 'listed_in(type)':'Type'}, inplace = True)
df.head()

df['location'].unique()

df['listed_in(city)'].unique()

df = df.drop(['listed_in(city)'], axis = 1)

df['Cost2plates'].unique()

def handlecomma(value):
    value = str(value)
    if ',' in value:
        value = value.replace(',', '')
        return float(value)
    else:
        return float(value)

df['Cost2plates'] = df['Cost2plates'].apply(handlecomma)
df['Cost2plates'].unique()

df.head()

rest_types = df['rest_type'].value_counts(ascending  = False)
rest_types

rest_types_lessthan1000 = rest_types[rest_types<1000]
rest_types_lessthan1000

def handle_rest_type(value):
    if(value in rest_types_lessthan1000):
        return 'others'
    else:
        return value

df['rest_type'] = df['rest_type'].apply(handle_rest_type)
df['rest_type'].value_counts()

location = df['location'].value_counts(ascending  = False)

location_lessthan300 = location[location<300]



def handle_location(value):
    if(value in location_lessthan300):
        return 'others'
    else:
        return value

df['location'] = df['location'].apply(handle_location)
df['location'].value_counts()

cuisines = df['cuisines'].value_counts(ascending  = False)


cuisines_lessthan100 = cuisines[cuisines<100]



def handle_cuisines(value):
    if(value in cuisines_lessthan100):
        return 'others'
    else:
        return value

df['cuisines'] = df['cuisines'].apply(handle_cuisines)
df['cuisines'].value_counts()

df.head()

"""DATA IS CLEANED NOW IT IS READY FOR VISUALISATION"""

plt.figure(figsize = (16,10))
ax = sns.countplot(df['location'])
plt.xticks(rotation=90)

from google.colab import drive
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Mount Google Drive
drive.mount('/content/drive')

# Load the file from Google Drive
file_path = '/content/drive/My Drive/zomato.csv'
df = pd.read_csv(file_path)

# Example of handling missing values
df.dropna(inplace=True)

# Example of removing duplicates
df.drop_duplicates(inplace=True)

# Plotting
plt.figure(figsize=(6, 6))
sns.countplot(data=df, x='online_order', palette='inferno')  # Corrected usage
plt.show()

plt.figure(figsize = (6,6))
sns.countplot(df['book_table'], palette = 'rainbow')

plt.figure(figsize = (6,6))
sns.boxplot(x = 'online_order', y = 'rate', data = df)

plt.figure(figsize = (6,6))
sns.boxplot(x = 'book_table', y = 'rate', data = df)

import numpy as np
df1 = df.groupby(['location','online_order'])['name'].count()
df1.to_csv('location_online.csv')
df1 = pd.read_csv('location_online.csv')
df1 = pd.pivot_table(df1, values=None, index=['location'], columns=['online_order'], fill_value=0, aggfunc=np.sum)
df1

df1.plot(kind = 'bar', figsize = (15,8))

df2 = df.groupby(['location','book_table'])['name'].count()
df2.to_csv('location_booktable.csv')
df2 = pd.read_csv('location_booktable.csv')
df2 = pd.pivot_table(df2, values=None, index=['location'], columns=['book_table'], fill_value=0, aggfunc=np.sum)
df2

df2.plot(kind = 'bar', figsize = (15,8))